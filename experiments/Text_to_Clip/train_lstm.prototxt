# --------------------------------------------------------
# Text-to-Clip Retrieval
# Copyright (c) 2019 Boston Univ.
# Licensed under The MIT License [see LICENSE for details]
# By Huijuan Xu
# --------------------------------------------------------

name: "lstm_language_model"

layer {
  name: 'data'
  type: 'Python'
  top: 'all_fc6_batched'
  top: 'all_target_sent_batched'
  top: 'all_input_sent_batched'
  top: 'all_cont_sent_batched'
  python_param {
    module: 'roi_data_layer.layer_retrieval_pairwiserank_caption_share'
    layer: 'RoIDataLayer'
    param_str: "'batch_size': 32"
  }
}

layer {
  name: "embedding"
  type: "Embed"
  bottom: "all_input_sent_batched"
  top: "embedded_input_sent"
  param {
    lr_mult: 1
  }
  embed_param {
    bias_term: false
    input_dim: 1112  # = vocab_size + 1 (for EOS)
    num_output: 300
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
  }
}
layer {
  name: "embed-drop"
  type: "Dropout"
  bottom: "embedded_input_sent"
  top: "embedded_input_sent"
  dropout_param { dropout_ratio: 0.5 }
}

###########   LSTM #####################
layer {
  name: "lstm1"
  type: "LSTM"
  bottom: "embedded_input_sent"
  bottom: "all_cont_sent_batched"
  top: "lstm1"
  recurrent_param {
    num_output: 512
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "lstm-drop"
  type: "Dropout"
  bottom: "lstm1"
  top: "lstm1"
  dropout_param { dropout_ratio: 0.5 }
#  include { stage: "lstm-drop" }
}

layer {
  name: "lstm2"
  type: "LSTM"
  bottom: "lstm1"
  bottom: "all_cont_sent_batched"
  bottom: "all_fc6_batched"
  top: "lstm2"
  recurrent_param {
    num_output: 512
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "lstm-drop_2"
  type: "Dropout"
  bottom: "lstm2"
  top: "lstm2"
  dropout_param { dropout_ratio: 0.5 }
}

layer {
  name: "predict"
  type: "InnerProduct"
  bottom: "lstm2"
  top: "predict"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1112  # = vocab_size + 1 (+1 for EOS)
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}
layer {
  name: "cross_entropy_loss"
  type: "SoftmaxWithLoss"
  bottom: "predict"
  bottom: "all_target_sent_batched"
  top: "cross_entropy_loss"
  loss_weight: 20
  loss_param {
    ignore_label: -1
  }
  softmax_param {
    axis: 2
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "predict"
  bottom: "all_target_sent_batched"
  top: "accuracy"
  loss_param {
    ignore_label: -1
  }
  accuracy_param {
    axis: 2
  }
  propagate_down: false
  propagate_down: false    
}

layer {
  name: 'last_hidden_state'
  type: 'Python'
  bottom: 'lstm2'
  bottom: 'all_cont_sent_batched'
  top: 'last_hidden_state'
  python_param {
    module: 'lstm.lstm_last_hidden_state_layer'
    layer: 'LSTMLastLayer'
  }
}

layer {
   name: "embedded_last_hidden_state"
   bottom: "last_hidden_state"
   top: "embedded_last_hidden_state"
   type: "Reshape"
   reshape_param { shape { dim: -1 dim: 512} }
}

layer {
  name: "innerproduce2"
  type: "InnerProduct"
  bottom: "embedded_last_hidden_state"
  top: "embedded_last_hidden_state_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 64
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "hidden_relu"
  type: "Sigmoid"
  bottom: "embedded_last_hidden_state_2"
  top: "embedded_last_hidden_state_2"
}

layer {
  name: "innerproduce"
  type: "InnerProduct"
  bottom: "embedded_last_hidden_state_2"
  top: "score"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}


layer {
   name: "score_reshape"
   bottom: "score"
   top: "score_matrix"
   type: "Reshape"
   reshape_param { shape { dim: -1} }
}


layer {
  name: "positive_negative_score"
  type: "Python"
  bottom: "score_matrix"
  top: "positive_score"
  top: "negative_score"
  python_param {
    module: 'rpn.Prepare_Paired_Positive_Negative_Sim'
    layer: 'ExtractPairSimLayer'
    param_str: "'batch_size': 32 "
  }
}

layer {
  name: "retrieval_loss"
  type: "PairwiseRankingLoss"
  bottom: "positive_score"
  bottom: "negative_score"
  top: "retrieval_loss"
  loss_weight: 40
  triplet_loss_param {
    margin:0.2
  }
}


